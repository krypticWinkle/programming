

bool isSafePosition(vector<vector<int>>chess, int row, int col)
{
    for(int i=0; i<row; i++)
    {
        if(chess[i][col] == 1)
        {
            return false;
        }
    }
    int j=col-1;
    for(int i=row-1; i>=0 && j>=0; i--, j--)
    {
        if(chess[i][j] == 1)
        {
            return false;
        }
    }
    j = col+1;
    for(int i=row-1; i>=0 && j<chess[0].size(); i--, j++)
    {
        if(chess[i][j] == 1)
        {
            return false;
        }
    }
    return true;
}

void printNQueens(vector<vector<int>>chess, int row, string queen_conf)
{
    for(int col=0; col<chess[0].size(); col++)
    {
        if(row == chess.size())
        {
            cout<<queen_conf<<"."<<endl;
        }
        if(isSafePosition(chess, row, col) == true)
        {
            chess[row][col] = 1;
            printNQueens(chess, row+1, queen_conf+to_string(row) + "-"+ to_string(col));
            chess[row][col] = 0;
        }
    }
}
